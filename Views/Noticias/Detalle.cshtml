@model plataformacomentarios.Models.External.Post
@{
    var autor = ViewBag.Autor as plataformacomentarios.Models.External.User;
    var comentarios = ViewBag.Comentarios as List<plataformacomentarios.Models.External.Comment>;
}

<h2>@Model.title</h2>
<p>@Model.body</p>

<h4>Autor: @autor?.name</h4>
<p>Email: @autor?.email</p>

<h4>Comentarios:</h4>
@foreach (var comment in comentarios)
{
    <div class="mb-2">
        <strong>@comment.name</strong> - <small>@comment.email</small>
        <p>@comment.body</p>
    </div>
}

<!-- Notificaci√≥n estilo toast -->
<div id="notification"></div>

<form id="feedbackForm" method="post">
    <input type="hidden" name="PostId" value="@Model.id" />
    <button type="submit" class="btn btn-success" data-sentimiento="like">üëç Me gust√≥</button>
    <button type="submit" class="btn btn-danger" data-sentimiento="dislike">üëé No me gust√≥</button>
</form>

@section Scripts {
    <script>
        document.getElementById('feedbackForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData();
            const postId = document.querySelector('input[name="PostId"]').value;
            const sentimiento = e.submitter?.dataset.sentimiento;

            formData.append('PostId', postId);
            formData.append('Sentimiento', sentimiento);

            const buttons = e.target.querySelectorAll('button');
            buttons.forEach(btn => btn.disabled = true);

            try {
                const response = await fetch('/api/feedback', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (!response.ok) {
                    const errorMessage = result.Message || result.message || result.errors?.join(', ') || 'Error desconocido';
                    showNotification(errorMessage, 'error');
                    return;
                }

                const successMessage = result.Message || result.message || '¬°Gracias por votar!';
                showNotification(successMessage, 'success');
            } catch (error) {
                showNotification('Error de conexi√≥n con el servidor.', 'error');
            } finally {
                buttons.forEach(btn => btn.disabled = false);
            }
        });

        function showNotification(message, type) {
            const notification = document.getElementById('notification');
            notification.innerHTML = `<strong>${type === 'success' ? '‚úîÔ∏è' : '‚ùå'} ${message}</strong>`;
            notification.className = `show notification-${type}`;

            setTimeout(() => {
                notification.classList.remove('show');
            }, 4000);
        }
    </script>

    <style>
        #notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-size: 16px;
            min-width: 220px;
            max-width: 300px;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-20px);
            transition: all 0.3s ease;
        }

        #notification.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .notification-success {
            background-color: #28a745;
        }

        .notification-error {
            background-color: #dc3545;
        }
    </style>
}
